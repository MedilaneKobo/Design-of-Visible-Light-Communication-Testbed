
LIFI_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000797  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000354  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  7a:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <send_byte>:



void send_byte(char my_byte)
{
	PORTD &= ~(1<<LED);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 7b       	andi	r25, 0xBF	; 191
  86:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	ef e0       	ldi	r30, 0x0F	; 15
  8a:	f7 e2       	ldi	r31, 0x27	; 39
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <send_byte+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <send_byte+0x10>
  92:	00 00       	nop
	_delay_ms(PERIOD);

	//transmission of bits
	for(int i = 0; i < 8; i++)
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	19 c0       	rjmp	.+50     	; 0xcc <send_byte+0x4a>
	{
		
		if ((my_byte&(0x01 << i))!= 0)
  9a:	48 2f       	mov	r20, r24
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	02 2e       	mov	r0, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <send_byte+0x24>
  a2:	55 95       	asr	r21
  a4:	47 95       	ror	r20
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <send_byte+0x20>
  aa:	40 ff       	sbrs	r20, 0
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <send_byte+0x34>
		{
			PORTD |= 1<<LED;
  ae:	92 b3       	in	r25, 0x12	; 18
  b0:	90 64       	ori	r25, 0x40	; 64
  b2:	92 bb       	out	0x12, r25	; 18
  b4:	03 c0       	rjmp	.+6      	; 0xbc <send_byte+0x3a>
		}
		else
		PORTD &= ~(1<<LED);
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	9f 7b       	andi	r25, 0xBF	; 191
  ba:	92 bb       	out	0x12, r25	; 18
  bc:	ef e0       	ldi	r30, 0x0F	; 15
  be:	f7 e2       	ldi	r31, 0x27	; 39
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <send_byte+0x3e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <send_byte+0x44>
  c6:	00 00       	nop
{
	PORTD &= ~(1<<LED);
	_delay_ms(PERIOD);

	//transmission of bits
	for(int i = 0; i < 8; i++)
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	28 30       	cpi	r18, 0x08	; 8
  ce:	31 05       	cpc	r19, r1
  d0:	24 f3       	brlt	.-56     	; 0x9a <send_byte+0x18>
		PORTD &= ~(1<<LED);
		
		_delay_ms(PERIOD);
	}

	PORTD |= (1<<LED);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	97 e2       	ldi	r25, 0x27	; 39
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <send_byte+0x5a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <send_byte+0x60>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <main>:
	char* string ="DEAR MAMA\n";
	int string_length;
	
	string_length = strlen(string);
	
	DDRD |=1<<LED;
  e6:	81 b3       	in	r24, 0x11	; 17
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	81 bb       	out	0x11, r24	; 17
	
	while (1)
	{
		
		
			for(int i = 0; i < string_length; i ++)
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	07 c0       	rjmp	.+14     	; 0x100 <main+0x1a>
			{
				send_byte(string[i]);
  f2:	fe 01       	movw	r30, r28
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	0e 94 41 00 	call	0x82	; 0x82 <send_byte>
	
	while (1)
	{
		
		
			for(int i = 0; i < string_length; i ++)
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	ca 30       	cpi	r28, 0x0A	; 10
 102:	d1 05       	cpc	r29, r1
 104:	b4 f3       	brlt	.-20     	; 0xf2 <main+0xc>
 106:	f2 cf       	rjmp	.-28     	; 0xec <main+0x6>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
